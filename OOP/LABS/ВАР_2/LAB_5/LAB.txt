#include <iostream>
#include <string>
#include <math.h>
#include <locale.h>
#include <windows.h>
#include <time.h>
#include "Sircle.h"

using namespace std;

template <class T>
class Sircle {
private:
	T x;
	T y;
	T r;
public:
	const double pi = 3.14;
	Sircle(T x, T y, T r);
	void draw();
	void setX(T x);
	void setY(T y);
	void setR(T r);
	T getR();
	T getX();
	T getY();
	double getS();
	double getP();

	friend bool operator >(Sircle s1, Sircle s2) {
		return s1.getR() > s2.getR();
	}

	friend Sircle& operator --(Sircle &s, int n) {
		s.setR(s.getR() - 1);
		return s;
	}
protected:
};

template<class T>
Sircle<T>::Sircle(T x, T y, T r)
{
	this->x = x;
	this->y = y;
	this->r = r;
}

template<class T>
void Sircle<T>::draw()
{
	cout << "ÝÒÎ ÊÐÓÃ -> O" << endl;
	cout << "x = " << this->x << " y = " << this->y << " r = " << this->r << endl;
}

template<class T>
void Sircle<T>::setX(T x)
{
	this->x = x;
}

template<class T>
void Sircle<T>::setY(T y)
{
	this->y = y;
}

template<class T>
void Sircle<T>::setR(T r)
{
	this->r = r;
}

template<class T>
T Sircle<T>::getR()
{
	return this->r;
}

template<class T>
T Sircle<T>::getX()
{
	return this->x;
}

template<class T>
T Sircle<T>::getY()
{
	return this->y;
}

template<class T>
double Sircle<T>::getS()
{
	return pow(pi*this->r, 2);
}

template<class T>
double Sircle<T>::getP()
{
	return pi* this->r * 2;
}


int main()
{
	srand(time(NULL));

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	Sircle<int> s1(1, 1, 3);
	Sircle<int> s2(2, 2, 3);

	s1.draw();
	s2.draw();

	cout << endl;
	s1--;
	s1 > s2 ? cout << "s1 > s2" << endl : cout << "s1 < s2" << endl;
	cout << endl;

	cout << "s1: S = " << s1.getS() << " P = " << s1.getP() << endl;
	cout << "s2: S = " << s2.getS() << " P = " << s2.getP() << endl;

	system("pause");
	return 0;
}